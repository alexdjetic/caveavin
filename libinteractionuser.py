from connexiondb import Connexdb

####################################
##### Gestion des commentaires #####
####################################

def add_commentaire(config_db: dict, nom_bouteille: str, commentaire: str, id_user: int, date: str) -> dict:
    """
    Adds a comment to the MongoDB collection.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    nom_bouteille : str
        The name of the bottle related to the comment.
    commentaire : str
        The comment text to be added.
    id_user : int
        The ID of the user making the comment.
    date : str
        The date when the comment was made.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)
    data: dict = {
        "auteur": id_user,
        "comment": commentaire,
        "nom_bouteille": nom_bouteille,
        "date": date
    }

    # Add to the database
    rstatus: dict = connex.insert_data_into_collection("commentaire", data)

    # ajouter id commentaires sur la bouteille A FAIRE
    
    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "Le commentaire a été ajouté avec succès !",
        "status": 200
    }


def del_commentaire(config_db: dict, query: dict) -> dict:
    """
    Deletes a comment from the MongoDB collection based on the provided query.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict
        A dictionary representing the query to locate the comment to be deleted.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)

    # Use "_id" generated by MongoDB to disassociate comment
    # Query example: {"_id": <_id given by the get of MongoDB>}

    rstatus: dict = connex.delete_data_from_collection("commentaire", query)

    # supprimer id commentaires sur la bouteille A FAIRE
    
    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "Le commentaire a été supprimé avec succès !",
        "status": 200
    }


def update_commentaire(config_db: dict, query: dict, data: dict) -> dict:
    """
    Updates a comment in the MongoDB collection based on the provided query and new data.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict
        A dictionary representing the query to locate the comment to be updated.
    data : dict
        A dictionary containing the updated data for the comment.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)

    # Use "_id" generated by MongoDB to disassociate comment
    # Query example: {"_id": <_id given by the get>}

    rstatus: dict = connex.update_data_from_collection("commentaire", query, data)

    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "Le commentaire a été mis à jour avec succès !",
        "status": 200
    }


def get_commentaire(config_db: dict, query: dict = None) -> dict:
    """
    Fetches comments from the MongoDB collection based on the provided query.

    If no query is provided, all comments are retrieved from the 'commentaire' collection.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict, optional
        A dictionary representing the query to filter comments (default is None).

    Returns
    -------
    dict
        A dictionary containing the status of the operation, a message,
        and the retrieved comments. The structure of the return dictionary is:
        {
            "status": int,
            "message": str,
            "commentaires": list
        }
    """
    connex: Connexdb = Connexdb(**config_db)

    if query is None:
        rstatus: dict = connex.get_all_data_from_collection("commentaire")

        if rstatus.get("status") != 200:
            return rstatus

        return {
            "message": "La liste des commentaires a été récupérée avec succès !",
            "status": 200,
            "commentaires": rstatus.get("data")
        }

    # Retrieve comments with a more precise query
    rstatus: dict = connex.get_data_from_collection("commentaire", query)

    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "La liste des commentaires (avec query) a été récupérée avec succès !",
        "status": 200,
        "commentaires": rstatus.get("data")
    }

####################################
#####     Gestion des notes    #####
####################################

def add_notes(config_db: dict, nom_bouteille: str, note: float, id_user: int) -> dict:
    """
    Adds a note to the MongoDB collection.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    nom_bouteille : str
        The name of the bottle related to the note.
    note : float
        The note value to be added.
    id_user : int
        The ID of the user making the note.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)
    data: dict = {
        "auteur": id_user,
        "note": note,
        "nom_bouteille": nom_bouteille,
    }

    # Add to the database
    rstatus: dict = connex.insert_data_into_collection("note", data)

    # ajouter id notes sur la bouteille A FAIRE

    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "La note a été ajoutée avec succès !",
        "status": 200
    }


def del_notes(config_db: dict, query: dict) -> dict:
    """
    Deletes a note from the MongoDB collection based on the provided query.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict
        A dictionary representing the query to locate the note to be deleted.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)

    # Use "_id" generated by MongoDB to disassociate note
    # Query example: {"_id": <_id given by the get>}

    rstatus: dict = connex.delete_data_from_collection("note", query)

    # supprimer id notes sur la bouteille A FAIRE
    
    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "La note a été supprimée avec succès !",
        "status": 200
    }


def update_notes(config_db: dict, query: dict, data: dict) -> dict:
    """
    Updates a note in the MongoDB collection based on the provided query and new data.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict
        A dictionary representing the query to locate the note to be updated.
    data : dict
        A dictionary containing the updated data for the note.

    Returns
    -------
    dict
        A dictionary containing the status of the operation and a message.
    """
    connex: Connexdb = Connexdb(**config_db)

    # Use "_id" generated by MongoDB to disassociate note
    # Query example: {"_id": <_id given by the get>}

    rstatus: dict = connex.update_data_from_collection("note", query, data)
    
    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "La note a été mise à jour avec succès !",
        "status": 200
    }


def get_notes(config_db: dict, query: dict = None) -> dict:
    """
    Fetches notes from the MongoDB collection based on the provided query.

    If no query is provided, all notes are retrieved from the 'note' collection.

    Parameters
    ----------
    config_db : dict
        A dictionary containing the configuration for connecting to the database.
    query : dict, optional
        A dictionary representing the query to filter notes (default is None).

    Returns
    -------
    dict
        A dictionary containing the status of the operation, a message,
        and the retrieved notes. The structure of the return dictionary is:
        {
            "status": int,
            "message": str,
            "notes": list
        }
    """
    connex: Connexdb = Connexdb(**config_db)

    if query is None:
        rstatus: dict = connex.get_all_data_from_collection("note")

        if rstatus.get("status") != 200:
            return rstatus

        return {
            "message": "La liste des notes a été récupérée avec succès !",
            "status": 200,
            "notes": rstatus.get("data")
        }

    # Retrieve notes with a more precise query
    rstatus: dict = connex.get_data_from_collection("note", query)

    if rstatus.get("status") != 200:
        return rstatus

    return {
        "message": "La liste des notes (avec query) a été récupérée avec succès !",
        "status": 200,
        "notes": rstatus.get("data")
    }
